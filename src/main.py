from code_gen import CodeGenerator
from lexer import Lexer
from parser import Parser, SemanticAnalyzer
from sam_vm import SAMVirtualMachine

example_1 = """
// calcula sequencia de fibonacci
let n: int = 10;

let a: int = 0;
let b: int = 1;
let c: int = 1;

let i: int = 0;
while (i < n) {
  print(c);

  c = a + b;
  a = b;
  b = c;

  i = i + 1;
}
"""

example_2 = """
while (true) {
  let foo: float = 3.14;
  break;
}

print(foo);
"""

example_3 = """
// declaração inválida, tipo especificado é diferente da constante
let test: bool = 10;
"""

example_4 = """
let i: int = 0;

while (i < 5) {
  if (i == 0) {
    print(000)
  } else if (i == 1) {
    print(001)
  } else if (i == 2) {
    print(010)
  } else if (i == 3) {
    print(011)
  } else {
    print(100)
  }
  i = i + 1;
}
"""

example_5 = """
let i: int = 1;
while (i <= 10) {
  let j: int = 1;
  while (j <= 10) {
    print(i * j);
    j = j + 1;
  }
  i = i + 1;
}
"""

example_6 = """
let pi: float = 3.14;
let r: float = 10.0;
let area: float = pi * r * r;
print(area);
"""

example_7 = """
let x: int = 10/(2 + 3) - 2;
print(x);
let y: float = 3.14;
if (x > 0) {
    y = y + 1.0;
    //break;
} else if (x < 0) {
    y = y - 1.0;
} else {
    y = y / 2.0;
}
print(y);
while (x <= 0) {
    x = x + 1;
    let z: int = 0;
    while (z < 10) {
        z = z + 1;
        print(z/2);
    }
    print(x);
    break;
}
"""

example_8 = """
let x: float = 10.0/(3.0/2.0) + 2.0;
print(x);
"""

example_9 = """
let cond1: bool = true;
let cond2: bool = false;
let cond3: bool = true;

if (cond1 || cond2 || cond3) {
    print(1);
} else {
    print(0);
}

if (cond1 && cond2 && cond3) {
    print(1);
} else {
    print(0);
}

if (cond1 && !cond2 && cond3) {
    print(1);
} else {
    print(0);
}
"""

example_10 = """
let 9invalid: bool = true;
"""

example_11 = """
if (true) {
    break; // error: break outside of loop
}
"""

lexer = Lexer(example_11)
tokens = lexer.tokenize()

parser = Parser(tokens)
ast = parser.parse()

analyzer = SemanticAnalyzer()
analyzer.analyze(ast)

print("Semantic analysis completed successfully.")

code_generator = CodeGenerator()
bytecode = code_generator.generate(ast)

# Print the generated bytecode
for instruction in bytecode:
    print(instruction)

# Run the bytecode on the SAM virtual machine
print("\nProgram output:")
vm = SAMVirtualMachine(bytecode)
vm.run()
